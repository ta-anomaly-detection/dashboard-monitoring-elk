input {
  beats {
    port => 5044
  }
}

filter {
  json {
    source => "message"
    skip_on_invalid_json => true
  }

  date {
    match => ["time", "ISO8601"]
    target => "log_time_parsed"
    remove_field => ["time"]
  }

  ruby {
    code => '
      if event.get("log_time_parsed")
        now = Time.now.utc
        diff = now - event.get("log_time_parsed").time
        event.set("ingest_latency_seconds", diff.round(3))
      end
    '
  }

  if [responseTime] {
    grok {
      match => {
        "responseTime" => "%{NUMBER:response_time_value:float}(?<response_time_unit>[a-zA-Zµ]+)"
      }
      tag_on_failure => ["responseTime_parse_failure"]
    }

    ruby {
      code => '
        value = event.get("response_time_value")
        unit = event.get("response_time_unit")
        if value && unit
          case unit
          when "µs", "us"
            latency = value
          when "ms"
            latency = value * 1000
          when "s"
            latency = value * 1000000
          else
            latency = value
          end
          event.set("latency_us", latency.round(2))
        end
      '
    }
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "web-server-logs-%{+YYYY.MM.dd}"
  }

  # Debug output
  stdout {
    codec => rubydebug
  }
}
